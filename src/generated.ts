// Generated by @wagmi/cli@1.0.0 on 08/04/2024 at 15:13:06
import {
  getContract,
  GetContractArgs,
  readContract,
  ReadContractConfig,
  writeContract,
  WriteContractArgs,
  WriteContractPreparedArgs,
  WriteContractUnpreparedArgs,
  prepareWriteContract,
  PrepareWriteContractConfig,
} from 'wagmi/actions'

import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FarmingCenter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const farmingCenterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_eternalFarming',
        internalType: 'contract IAlgebraEternalFarming',
        type: 'address',
      },
      {
        name: '_nonfungiblePositionManager',
        internalType: 'contract INonfungiblePositionManager',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidityDelta', internalType: 'int256', type: 'int256' },
    ],
    name: 'applyLiquidityDelta',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burnPosition',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'rewardToken',
        internalType: 'contract IERC20Minimal',
        type: 'address',
      },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amountRequested', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'claimReward',
    outputs: [{ name: 'reward', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'key',
        internalType: 'struct IncentiveKey',
        type: 'tuple',
        components: [
          {
            name: 'rewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'bonusRewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract IAlgebraPool',
            type: 'address',
          },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'collectRewards',
    outputs: [
      { name: 'reward', internalType: 'uint256', type: 'uint256' },
      { name: 'bonusReward', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pool', internalType: 'contract IAlgebraPool', type: 'address' },
      { name: 'newVirtualPool', internalType: 'address', type: 'address' },
    ],
    name: 'connectVirtualPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidityDelta', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseLiquidity',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'deposits',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'key',
        internalType: 'struct IncentiveKey',
        type: 'tuple',
        components: [
          {
            name: 'rewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'bonusRewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract IAlgebraPool',
            type: 'address',
          },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'enterFarming',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eternalFarming',
    outputs: [
      {
        name: '',
        internalType: 'contract IAlgebraEternalFarming',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'key',
        internalType: 'struct IncentiveKey',
        type: 'tuple',
        components: [
          {
            name: 'rewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'bonusRewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract IAlgebraPool',
            type: 'address',
          },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'exitFarming',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'incentiveKeys',
    outputs: [
      {
        name: 'rewardToken',
        internalType: 'contract IERC20Minimal',
        type: 'address',
      },
      {
        name: 'bonusRewardToken',
        internalType: 'contract IERC20Minimal',
        type: 'address',
      },
      { name: 'pool', internalType: 'contract IAlgebraPool', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidityDelta', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseLiquidity',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonfungiblePositionManager',
    outputs: [
      {
        name: '',
        internalType: 'contract INonfungiblePositionManager',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'virtualPoolAddresses',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

export const farmingCenterAddress =
  '0xEa59E820c125C2435B357026eec4419cc0A4e751' as const

export const farmingCenterConfig = {
  address: farmingCenterAddress,
  abi: farmingCenterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EternalFarming
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eternalFarmingABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_deployer',
        internalType: 'contract IAlgebraPoolDeployer',
        type: 'address',
      },
      {
        name: '_nonfungiblePositionManager',
        internalType: 'contract INonfungiblePositionManager',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'anotherFarmingIsActive' },
  { type: 'error', inputs: [], name: 'claimToZeroAddress' },
  { type: 'error', inputs: [], name: 'emergencyActivated' },
  { type: 'error', inputs: [], name: 'farmDoesNotExist' },
  { type: 'error', inputs: [], name: 'incentiveNotExist' },
  { type: 'error', inputs: [], name: 'incentiveStopped' },
  { type: 'error', inputs: [], name: 'invalidPool' },
  { type: 'error', inputs: [], name: 'invalidTokenAmount' },
  { type: 'error', inputs: [], name: 'minimalPositionWidthTooWide' },
  { type: 'error', inputs: [], name: 'pluginNotConnected' },
  { type: 'error', inputs: [], name: 'poolReentrancyLock' },
  { type: 'error', inputs: [], name: 'positionIsTooNarrow' },
  { type: 'error', inputs: [], name: 'reentrancyLock' },
  { type: 'error', inputs: [], name: 'tokenAlreadyFarmed' },
  { type: 'error', inputs: [], name: 'zeroLiquidity' },
  { type: 'error', inputs: [], name: 'zeroRewardAmount' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'newStatus', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'EmergencyWithdraw',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardToken',
        internalType: 'contract IERC20Minimal',
        type: 'address',
        indexed: true,
      },
      {
        name: 'bonusRewardToken',
        internalType: 'contract IERC20Minimal',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pool',
        internalType: 'contract IAlgebraPool',
        type: 'address',
        indexed: true,
      },
      {
        name: 'virtualPool',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reward',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bonusReward',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'minimalAllowedPositionWidth',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
    ],
    name: 'EternalFarmingCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'incentiveId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'rewardAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'bonusRewardToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'reward',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bonusReward',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FarmEnded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'incentiveId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'liquidity',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'FarmEntered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'farmingCenter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'FarmingCenter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'incentiveId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'IncentiveDeactivated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bonusRewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'incentiveId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'RewardAmountsDecreased',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'reward',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'rewardAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bonusRewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'incentiveId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'RewardsAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'incentiveId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'rewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bonusRewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsCollected',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardRate',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'bonusRewardRate',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'incentiveId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'RewardsRatesChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'FARMINGS_ADMINISTRATOR_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'INCENTIVE_MAKER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'key',
        internalType: 'struct IncentiveKey',
        type: 'tuple',
        components: [
          {
            name: 'rewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'bonusRewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract IAlgebraPool',
            type: 'address',
          },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'rewardAmount', internalType: 'uint128', type: 'uint128' },
      { name: 'bonusRewardAmount', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'addRewards',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'rewardToken',
        internalType: 'contract IERC20Minimal',
        type: 'address',
      },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amountRequested', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'claimReward',
    outputs: [{ name: 'reward', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'rewardToken',
        internalType: 'contract IERC20Minimal',
        type: 'address',
      },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amountRequested', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'claimRewardFrom',
    outputs: [{ name: 'reward', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'key',
        internalType: 'struct IncentiveKey',
        type: 'tuple',
        components: [
          {
            name: 'rewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'bonusRewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract IAlgebraPool',
            type: 'address',
          },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
    name: 'collectRewards',
    outputs: [
      { name: 'reward', internalType: 'uint256', type: 'uint256' },
      { name: 'bonusReward', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'key',
        internalType: 'struct IncentiveKey',
        type: 'tuple',
        components: [
          {
            name: 'rewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'bonusRewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract IAlgebraPool',
            type: 'address',
          },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'params',
        internalType: 'struct IAlgebraEternalFarming.IncentiveParams',
        type: 'tuple',
        components: [
          { name: 'reward', internalType: 'uint128', type: 'uint128' },
          { name: 'bonusReward', internalType: 'uint128', type: 'uint128' },
          { name: 'rewardRate', internalType: 'uint128', type: 'uint128' },
          { name: 'bonusRewardRate', internalType: 'uint128', type: 'uint128' },
          {
            name: 'minimalPositionWidth',
            internalType: 'uint24',
            type: 'uint24',
          },
        ],
      },
      { name: 'plugin', internalType: 'address', type: 'address' },
    ],
    name: 'createEternalFarming',
    outputs: [
      { name: 'virtualPool', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'key',
        internalType: 'struct IncentiveKey',
        type: 'tuple',
        components: [
          {
            name: 'rewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'bonusRewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract IAlgebraPool',
            type: 'address',
          },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'deactivateIncentive',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'key',
        internalType: 'struct IncentiveKey',
        type: 'tuple',
        components: [
          {
            name: 'rewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'bonusRewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract IAlgebraPool',
            type: 'address',
          },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'rewardAmount', internalType: 'uint128', type: 'uint128' },
      { name: 'bonusRewardAmount', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'decreaseRewardsAmount',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'key',
        internalType: 'struct IncentiveKey',
        type: 'tuple',
        components: [
          {
            name: 'rewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'bonusRewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract IAlgebraPool',
            type: 'address',
          },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'enterFarming',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'key',
        internalType: 'struct IncentiveKey',
        type: 'tuple',
        components: [
          {
            name: 'rewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'bonusRewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract IAlgebraPool',
            type: 'address',
          },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
    name: 'exitFarming',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'farmingCenter',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'incentiveId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'farms',
    outputs: [
      { name: 'liquidity', internalType: 'uint128', type: 'uint128' },
      { name: 'tickLower', internalType: 'int24', type: 'int24' },
      { name: 'tickUpper', internalType: 'int24', type: 'int24' },
      { name: 'innerRewardGrowth0', internalType: 'uint256', type: 'uint256' },
      { name: 'innerRewardGrowth1', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'key',
        internalType: 'struct IncentiveKey',
        type: 'tuple',
        components: [
          {
            name: 'rewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'bonusRewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract IAlgebraPool',
            type: 'address',
          },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRewardInfo',
    outputs: [
      { name: 'reward', internalType: 'uint256', type: 'uint256' },
      { name: 'bonusReward', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'incentiveId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'incentives',
    outputs: [
      { name: 'totalReward', internalType: 'uint128', type: 'uint128' },
      { name: 'bonusReward', internalType: 'uint128', type: 'uint128' },
      { name: 'virtualPoolAddress', internalType: 'address', type: 'address' },
      { name: 'minimalPositionWidth', internalType: 'uint24', type: 'uint24' },
      { name: 'deactivated', internalType: 'bool', type: 'bool' },
      { name: 'pluginAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isEmergencyWithdrawActivated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'incentiveId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isIncentiveDeactivated',
    outputs: [{ name: 'res', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonfungiblePositionManager',
    outputs: [
      {
        name: '',
        internalType: 'contract INonfungiblePositionManager',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numOfIncentives',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      {
        name: 'rewardToken',
        internalType: 'contract IERC20Minimal',
        type: 'address',
      },
    ],
    name: 'rewards',
    outputs: [
      { name: 'rewardAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newStatus', internalType: 'bool', type: 'bool' }],
    name: 'setEmergencyWithdrawStatus',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_farmingCenter', internalType: 'address', type: 'address' },
    ],
    name: 'setFarmingCenterAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'key',
        internalType: 'struct IncentiveKey',
        type: 'tuple',
        components: [
          {
            name: 'rewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'bonusRewardToken',
            internalType: 'contract IERC20Minimal',
            type: 'address',
          },
          {
            name: 'pool',
            internalType: 'contract IAlgebraPool',
            type: 'address',
          },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'rewardRate', internalType: 'uint128', type: 'uint128' },
      { name: 'bonusRewardRate', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'setRates',
    outputs: [],
  },
] as const

export const eternalFarmingAddress =
  '0x114b8291bE7724c6b363809F91c03903b8c48E0D' as const

export const eternalFarmingConfig = {
  address: eternalFarmingAddress,
  abi: eternalFarmingABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AlgebraFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const algebraFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_poolDeployer', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newDefaultCommunityFee',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'DefaultCommunityFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newFarmingAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'FarmingAddress',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'alpha1',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'alpha2',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      { name: 'beta1', internalType: 'uint32', type: 'uint32', indexed: false },
      { name: 'beta2', internalType: 'uint32', type: 'uint32', indexed: false },
      {
        name: 'gamma1',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'gamma2',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'baseFee',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
    ],
    name: 'FeeConfiguration',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token0',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token1',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pool',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Pool',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'renounceOwnershipFinished',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'finishTimestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'renounceOwnershipStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'renounceOwnershipStopped',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseFeeConfiguration',
    outputs: [
      { name: 'alpha1', internalType: 'uint16', type: 'uint16' },
      { name: 'alpha2', internalType: 'uint16', type: 'uint16' },
      { name: 'beta1', internalType: 'uint32', type: 'uint32' },
      { name: 'beta2', internalType: 'uint32', type: 'uint32' },
      { name: 'gamma1', internalType: 'uint16', type: 'uint16' },
      { name: 'gamma2', internalType: 'uint16', type: 'uint16' },
      { name: 'baseFee', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'communityVault',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [{ name: 'pool', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultCommunityFee',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'farmingAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRoleMember',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleMemberCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRoleOrOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'poolByPair',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolDeployer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'renounceOwnershipStartTimestamp',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_config',
        internalType: 'struct IAlgebraFeeConfiguration.Configuration',
        type: 'tuple',
        components: [
          { name: 'alpha1', internalType: 'uint16', type: 'uint16' },
          { name: 'alpha2', internalType: 'uint16', type: 'uint16' },
          { name: 'beta1', internalType: 'uint32', type: 'uint32' },
          { name: 'beta2', internalType: 'uint32', type: 'uint32' },
          { name: 'gamma1', internalType: 'uint16', type: 'uint16' },
          { name: 'gamma2', internalType: 'uint16', type: 'uint16' },
          { name: 'baseFee', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'setBaseFeeConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newDefaultCommunityFee', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'setDefaultCommunityFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newFarmingAddress', internalType: 'address', type: 'address' },
    ],
    name: 'setFarmingAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startRenounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopRenounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

export const algebraFactoryAddress =
  '0x3cd3d9da786257c7EC74F80e1661fe40583b0F87' as const

export const algebraFactoryConfig = {
  address: algebraFactoryAddress,
  abi: algebraFactoryABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AlgebraPool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const algebraPoolABI = [
  { type: 'error', inputs: [], name: 'alreadyInitialized' },
  { type: 'error', inputs: [], name: 'arithmeticError' },
  { type: 'error', inputs: [], name: 'bottomTickLowerThanMIN' },
  { type: 'error', inputs: [], name: 'dynamicFeeActive' },
  { type: 'error', inputs: [], name: 'dynamicFeeDisabled' },
  { type: 'error', inputs: [], name: 'flashInsufficientPaid0' },
  { type: 'error', inputs: [], name: 'flashInsufficientPaid1' },
  { type: 'error', inputs: [], name: 'insufficientInputAmount' },
  { type: 'error', inputs: [], name: 'invalidAmountRequired' },
  {
    type: 'error',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'invalidHookResponse',
  },
  { type: 'error', inputs: [], name: 'invalidLimitSqrtPrice' },
  { type: 'error', inputs: [], name: 'invalidNewCommunityFee' },
  { type: 'error', inputs: [], name: 'invalidNewTickSpacing' },
  { type: 'error', inputs: [], name: 'liquidityAdd' },
  { type: 'error', inputs: [], name: 'liquidityOverflow' },
  { type: 'error', inputs: [], name: 'liquiditySub' },
  { type: 'error', inputs: [], name: 'locked' },
  { type: 'error', inputs: [], name: 'notAllowed' },
  { type: 'error', inputs: [], name: 'notInitialized' },
  { type: 'error', inputs: [], name: 'onlyFarming' },
  { type: 'error', inputs: [], name: 'pluginIsNotConnected' },
  { type: 'error', inputs: [], name: 'priceOutOfRange' },
  { type: 'error', inputs: [], name: 'tickInvalidLinks' },
  { type: 'error', inputs: [], name: 'tickIsNotInitialized' },
  { type: 'error', inputs: [], name: 'tickIsNotSpaced' },
  { type: 'error', inputs: [], name: 'tickOutOfRange' },
  { type: 'error', inputs: [], name: 'topTickAboveMAX' },
  { type: 'error', inputs: [], name: 'topTickLowerOrEqBottomTick' },
  { type: 'error', inputs: [], name: 'transferFailed' },
  { type: 'error', inputs: [], name: 'zeroAmountRequired' },
  { type: 'error', inputs: [], name: 'zeroLiquidityActual' },
  { type: 'error', inputs: [], name: 'zeroLiquidityDesired' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'bottomTick',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      { name: 'topTick', internalType: 'int24', type: 'int24', indexed: true },
      {
        name: 'liquidityAmount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Burn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'bottomTick',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      { name: 'topTick', internalType: 'int24', type: 'int24', indexed: true },
      {
        name: 'amount0',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'Collect',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'communityFeeNew',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
    ],
    name: 'CommunityFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'fee', internalType: 'uint16', type: 'uint16', indexed: false },
    ],
    name: 'Fee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paid0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paid1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Flash',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'price',
        internalType: 'uint160',
        type: 'uint160',
        indexed: false,
      },
      { name: 'tick', internalType: 'int24', type: 'int24', indexed: false },
    ],
    name: 'Initialize',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'bottomTick',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      { name: 'topTick', internalType: 'int24', type: 'int24', indexed: true },
      {
        name: 'liquidityAmount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newPluginAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Plugin',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newPluginConfig',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PluginConfig',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'price',
        internalType: 'uint160',
        type: 'uint160',
        indexed: false,
      },
      {
        name: 'liquidity',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      { name: 'tick', internalType: 'int24', type: 'int24', indexed: false },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newTickSpacing',
        internalType: 'int24',
        type: 'int24',
        indexed: false,
      },
    ],
    name: 'TickSpacing',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'bottomTick', internalType: 'int24', type: 'int24' },
      { name: 'topTick', internalType: 'int24', type: 'int24' },
      { name: 'amount', internalType: 'uint128', type: 'uint128' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'burn',
    outputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'bottomTick', internalType: 'int24', type: 'int24' },
      { name: 'topTick', internalType: 'int24', type: 'int24' },
      { name: 'amount0Requested', internalType: 'uint128', type: 'uint128' },
      { name: 'amount1Requested', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'collect',
    outputs: [
      { name: 'amount0', internalType: 'uint128', type: 'uint128' },
      { name: 'amount1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'communityFeeLastTimestamp',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'communityVault',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fee',
    outputs: [{ name: 'currentFee', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flash',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCommunityFeePending',
    outputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: '', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getReserves',
    outputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: '', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'globalState',
    outputs: [
      { name: 'price', internalType: 'uint160', type: 'uint160' },
      { name: 'tick', internalType: 'int24', type: 'int24' },
      { name: 'fee', internalType: 'uint16', type: 'uint16' },
      { name: 'pluginConfig', internalType: 'uint8', type: 'uint8' },
      { name: 'communityFee', internalType: 'uint16', type: 'uint16' },
      { name: 'unlocked', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initialPrice', internalType: 'uint160', type: 'uint160' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidity',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'maxLiquidityPerTick',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'leftoversRecipient', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'bottomTick', internalType: 'int24', type: 'int24' },
      { name: 'topTick', internalType: 'int24', type: 'int24' },
      { name: 'liquidityDesired', internalType: 'uint128', type: 'uint128' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mint',
    outputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidityActual', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nextTickGlobal',
    outputs: [{ name: '', internalType: 'int24', type: 'int24' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'plugin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'positions',
    outputs: [
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      {
        name: 'innerFeeGrowth0Token',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'innerFeeGrowth1Token',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'fees0', internalType: 'uint128', type: 'uint128' },
      { name: 'fees1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'prevTickGlobal',
    outputs: [{ name: '', internalType: 'int24', type: 'int24' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newCommunityFee', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'setCommunityFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newFee', internalType: 'uint16', type: 'uint16' }],
    name: 'setFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newPluginAddress', internalType: 'address', type: 'address' },
    ],
    name: 'setPlugin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newConfig', internalType: 'uint8', type: 'uint8' }],
    name: 'setPluginConfig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newTickSpacing', internalType: 'int24', type: 'int24' }],
    name: 'setTickSpacing',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'zeroToOne', internalType: 'bool', type: 'bool' },
      { name: 'amountRequired', internalType: 'int256', type: 'int256' },
      { name: 'limitSqrtPrice', internalType: 'uint160', type: 'uint160' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swap',
    outputs: [
      { name: 'amount0', internalType: 'int256', type: 'int256' },
      { name: 'amount1', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'leftoversRecipient', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'zeroToOne', internalType: 'bool', type: 'bool' },
      { name: 'amountToSell', internalType: 'int256', type: 'int256' },
      { name: 'limitSqrtPrice', internalType: 'uint160', type: 'uint160' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swapWithPaymentInAdvance',
    outputs: [
      { name: 'amount0', internalType: 'int256', type: 'int256' },
      { name: 'amount1', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tickSpacing',
    outputs: [{ name: '', internalType: 'int24', type: 'int24' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'int16', type: 'int16' }],
    name: 'tickTable',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'int24', type: 'int24' }],
    name: 'ticks',
    outputs: [
      { name: 'liquidityTotal', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidityDelta', internalType: 'int128', type: 'int128' },
      { name: 'prevTick', internalType: 'int24', type: 'int24' },
      { name: 'nextTick', internalType: 'int24', type: 'int24' },
      {
        name: 'outerFeeGrowth0Token',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'outerFeeGrowth1Token',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalFeeGrowth0Token',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalFeeGrowth1Token',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AlgebraVirtualPool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const algebraVirtualPoolABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_farmingAddress', internalType: 'address', type: 'address' },
      { name: '_plugin', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'invalidFeeWeights' },
  { type: 'error', inputs: [], name: 'invalidNewMaxRate' },
  { type: 'error', inputs: [], name: 'invalidNewMinRate' },
  { type: 'error', inputs: [], name: 'liquidityAdd' },
  { type: 'error', inputs: [], name: 'liquidityOverflow' },
  { type: 'error', inputs: [], name: 'liquiditySub' },
  { type: 'error', inputs: [], name: 'onlyFarming' },
  { type: 'error', inputs: [], name: 'onlyPlugin' },
  { type: 'error', inputs: [], name: 'tickInvalidLinks' },
  { type: 'error', inputs: [], name: 'tickIsNotInitialized' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'FEE_WEIGHT_DENOMINATOR',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RATE_CHANGE_FREQUENCY',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token0Amount', internalType: 'uint128', type: 'uint128' },
      { name: 'token1Amount', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'addRewards',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'bottomTick', internalType: 'int24', type: 'int24' },
      { name: 'topTick', internalType: 'int24', type: 'int24' },
      { name: 'liquidityDelta', internalType: 'int128', type: 'int128' },
      { name: 'currentTick', internalType: 'int24', type: 'int24' },
    ],
    name: 'applyLiquidityDeltaToPosition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targetTick', internalType: 'int24', type: 'int24' },
      { name: 'zeroToOne', internalType: 'bool', type: 'bool' },
      { name: 'feeAmount', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'crossTo',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentLiquidity',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'deactivate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'deactivated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token0Amount', internalType: 'uint128', type: 'uint128' },
      { name: 'token1Amount', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'decreaseRewards',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dynamicRateActivated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'farmingAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeWeights',
    outputs: [
      { name: 'weight0', internalType: 'uint16', type: 'uint16' },
      { name: 'weight1', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'bottomTick', internalType: 'int24', type: 'int24' },
      { name: 'topTick', internalType: 'int24', type: 'int24' },
    ],
    name: 'getInnerRewardsGrowth',
    outputs: [
      { name: 'rewardGrowthInside0', internalType: 'uint256', type: 'uint256' },
      { name: 'rewardGrowthInside1', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'globalTick',
    outputs: [{ name: '', internalType: 'int24', type: 'int24' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'plugin',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'prevTimestamp',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rateLimits',
    outputs: [
      { name: 'maxRewardRate0', internalType: 'uint128', type: 'uint128' },
      { name: 'maxRewardRate1', internalType: 'uint128', type: 'uint128' },
      { name: 'minRewardRate0', internalType: 'uint128', type: 'uint128' },
      { name: 'minRewardRate1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardRates',
    outputs: [
      { name: 'rate0', internalType: 'uint128', type: 'uint128' },
      { name: 'rate1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardReserves',
    outputs: [
      { name: 'reserve0', internalType: 'uint128', type: 'uint128' },
      { name: 'reserve1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_maxRate0', internalType: 'uint128', type: 'uint128' },
      { name: '_maxRate1', internalType: 'uint128', type: 'uint128' },
      { name: '_minRate0', internalType: 'uint128', type: 'uint128' },
      { name: '_minRate1', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'setDynamicRateLimits',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'rate0', internalType: 'uint128', type: 'uint128' },
      { name: 'rate1', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'setRates',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'weight0', internalType: 'uint16', type: 'uint16' },
      { name: 'weight1', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'setWeights',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'isActive', internalType: 'bool', type: 'bool' }],
    name: 'switchDynamicRate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tickId', internalType: 'int24', type: 'int24' }],
    name: 'ticks',
    outputs: [
      { name: 'liquidityTotal', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidityDelta', internalType: 'int128', type: 'int128' },
      { name: 'prevTick', internalType: 'int24', type: 'int24' },
      { name: 'nextTick', internalType: 'int24', type: 'int24' },
      {
        name: 'outerFeeGrowth0Token',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'outerFeeGrowth1Token',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalRewardGrowth',
    outputs: [
      { name: 'rewardGrowth0', internalType: 'uint256', type: 'uint256' },
      { name: 'rewardGrowth1', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link farmingCenterABI}__.
 */
export function getFarmingCenter(
  config: Omit<GetContractArgs, 'abi' | 'address'>,
) {
  return getContract({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    ...config,
  })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link farmingCenterABI}__.
 */
export function readFarmingCenter<
  TAbi extends readonly unknown[] = typeof farmingCenterABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi' | 'address'>) {
  return readContract({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link farmingCenterABI}__.
 */
export function writeFarmingCenter<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof farmingCenterABI, TFunctionName>,
        'abi' | 'address'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof farmingCenterABI, TFunctionName>,
        'abi' | 'address'
      >,
) {
  return writeContract({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    ...config,
  } as unknown as WriteContractArgs<typeof farmingCenterABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link farmingCenterABI}__.
 */
export function prepareWriteFarmingCenter<
  TAbi extends readonly unknown[] = typeof farmingCenterABI,
  TFunctionName extends string = string,
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  >,
) {
  return prepareWriteContract({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link eternalFarmingABI}__.
 */
export function getEternalFarming(
  config: Omit<GetContractArgs, 'abi' | 'address'>,
) {
  return getContract({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    ...config,
  })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link eternalFarmingABI}__.
 */
export function readEternalFarming<
  TAbi extends readonly unknown[] = typeof eternalFarmingABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi' | 'address'>) {
  return readContract({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link eternalFarmingABI}__.
 */
export function writeEternalFarming<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof eternalFarmingABI, TFunctionName>,
        'abi' | 'address'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof eternalFarmingABI, TFunctionName>,
        'abi' | 'address'
      >,
) {
  return writeContract({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    ...config,
  } as unknown as WriteContractArgs<typeof eternalFarmingABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link eternalFarmingABI}__.
 */
export function prepareWriteEternalFarming<
  TAbi extends readonly unknown[] = typeof eternalFarmingABI,
  TFunctionName extends string = string,
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  >,
) {
  return prepareWriteContract({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link algebraFactoryABI}__.
 */
export function getAlgebraFactory(
  config: Omit<GetContractArgs, 'abi' | 'address'>,
) {
  return getContract({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    ...config,
  })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link algebraFactoryABI}__.
 */
export function readAlgebraFactory<
  TAbi extends readonly unknown[] = typeof algebraFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi' | 'address'>) {
  return readContract({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link algebraFactoryABI}__.
 */
export function writeAlgebraFactory<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof algebraFactoryABI, TFunctionName>,
        'abi' | 'address'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof algebraFactoryABI, TFunctionName>,
        'abi' | 'address'
      >,
) {
  return writeContract({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    ...config,
  } as unknown as WriteContractArgs<typeof algebraFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link algebraFactoryABI}__.
 */
export function prepareWriteAlgebraFactory<
  TAbi extends readonly unknown[] = typeof algebraFactoryABI,
  TFunctionName extends string = string,
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  >,
) {
  return prepareWriteContract({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link algebraPoolABI}__.
 */
export function getAlgebraPool(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: algebraPoolABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link algebraPoolABI}__.
 */
export function readAlgebraPool<
  TAbi extends readonly unknown[] = typeof algebraPoolABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: algebraPoolABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link algebraPoolABI}__.
 */
export function writeAlgebraPool<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof algebraPoolABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof algebraPoolABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: algebraPoolABI,
    ...config,
  } as unknown as WriteContractArgs<typeof algebraPoolABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link algebraPoolABI}__.
 */
export function prepareWriteAlgebraPool<
  TAbi extends readonly unknown[] = typeof algebraPoolABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: algebraPoolABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link algebraVirtualPoolABI}__.
 */
export function getAlgebraVirtualPool(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: algebraVirtualPoolABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link algebraVirtualPoolABI}__.
 */
export function readAlgebraVirtualPool<
  TAbi extends readonly unknown[] = typeof algebraVirtualPoolABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: algebraVirtualPoolABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link algebraVirtualPoolABI}__.
 */
export function writeAlgebraVirtualPool<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof algebraVirtualPoolABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof algebraVirtualPoolABI,
          TFunctionName
        >,
        'abi'
      >,
) {
  return writeContract({
    abi: algebraVirtualPoolABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof algebraVirtualPoolABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link algebraVirtualPoolABI}__.
 */
export function prepareWriteAlgebraVirtualPool<
  TAbi extends readonly unknown[] = typeof algebraVirtualPoolABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: algebraVirtualPoolABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link farmingCenterABI}__.
 */
export function useFarmingCenterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof farmingCenterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof farmingCenterABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    ...config,
  } as UseContractReadConfig<
    typeof farmingCenterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"deposits"`.
 */
export function useFarmingCenterDeposits<
  TFunctionName extends 'deposits',
  TSelectData = ReadContractResult<typeof farmingCenterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof farmingCenterABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'deposits',
    ...config,
  } as UseContractReadConfig<
    typeof farmingCenterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"eternalFarming"`.
 */
export function useFarmingCenterEternalFarming<
  TFunctionName extends 'eternalFarming',
  TSelectData = ReadContractResult<typeof farmingCenterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof farmingCenterABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'eternalFarming',
    ...config,
  } as UseContractReadConfig<
    typeof farmingCenterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"incentiveKeys"`.
 */
export function useFarmingCenterIncentiveKeys<
  TFunctionName extends 'incentiveKeys',
  TSelectData = ReadContractResult<typeof farmingCenterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof farmingCenterABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'incentiveKeys',
    ...config,
  } as UseContractReadConfig<
    typeof farmingCenterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"nonfungiblePositionManager"`.
 */
export function useFarmingCenterNonfungiblePositionManager<
  TFunctionName extends 'nonfungiblePositionManager',
  TSelectData = ReadContractResult<typeof farmingCenterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof farmingCenterABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'nonfungiblePositionManager',
    ...config,
  } as UseContractReadConfig<
    typeof farmingCenterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"virtualPoolAddresses"`.
 */
export function useFarmingCenterVirtualPoolAddresses<
  TFunctionName extends 'virtualPoolAddresses',
  TSelectData = ReadContractResult<typeof farmingCenterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof farmingCenterABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'virtualPoolAddresses',
    ...config,
  } as UseContractReadConfig<
    typeof farmingCenterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link farmingCenterABI}__.
 */
export function useFarmingCenterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof farmingCenterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof farmingCenterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof farmingCenterABI, TFunctionName, TMode>({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"applyLiquidityDelta"`.
 */
export function useFarmingCenterApplyLiquidityDelta<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof farmingCenterABI,
          'applyLiquidityDelta'
        >['request']['abi'],
        'applyLiquidityDelta',
        TMode
      > & { functionName?: 'applyLiquidityDelta' }
    : UseContractWriteConfig<
        typeof farmingCenterABI,
        'applyLiquidityDelta',
        TMode
      > & {
        abi?: never
        functionName?: 'applyLiquidityDelta'
      } = {} as any,
) {
  return useContractWrite<
    typeof farmingCenterABI,
    'applyLiquidityDelta',
    TMode
  >({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'applyLiquidityDelta',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"burnPosition"`.
 */
export function useFarmingCenterBurnPosition<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof farmingCenterABI,
          'burnPosition'
        >['request']['abi'],
        'burnPosition',
        TMode
      > & { functionName?: 'burnPosition' }
    : UseContractWriteConfig<typeof farmingCenterABI, 'burnPosition', TMode> & {
        abi?: never
        functionName?: 'burnPosition'
      } = {} as any,
) {
  return useContractWrite<typeof farmingCenterABI, 'burnPosition', TMode>({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'burnPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"claimReward"`.
 */
export function useFarmingCenterClaimReward<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof farmingCenterABI,
          'claimReward'
        >['request']['abi'],
        'claimReward',
        TMode
      > & { functionName?: 'claimReward' }
    : UseContractWriteConfig<typeof farmingCenterABI, 'claimReward', TMode> & {
        abi?: never
        functionName?: 'claimReward'
      } = {} as any,
) {
  return useContractWrite<typeof farmingCenterABI, 'claimReward', TMode>({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'claimReward',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"collectRewards"`.
 */
export function useFarmingCenterCollectRewards<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof farmingCenterABI,
          'collectRewards'
        >['request']['abi'],
        'collectRewards',
        TMode
      > & { functionName?: 'collectRewards' }
    : UseContractWriteConfig<
        typeof farmingCenterABI,
        'collectRewards',
        TMode
      > & {
        abi?: never
        functionName?: 'collectRewards'
      } = {} as any,
) {
  return useContractWrite<typeof farmingCenterABI, 'collectRewards', TMode>({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'collectRewards',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"connectVirtualPool"`.
 */
export function useFarmingCenterConnectVirtualPool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof farmingCenterABI,
          'connectVirtualPool'
        >['request']['abi'],
        'connectVirtualPool',
        TMode
      > & { functionName?: 'connectVirtualPool' }
    : UseContractWriteConfig<
        typeof farmingCenterABI,
        'connectVirtualPool',
        TMode
      > & {
        abi?: never
        functionName?: 'connectVirtualPool'
      } = {} as any,
) {
  return useContractWrite<typeof farmingCenterABI, 'connectVirtualPool', TMode>(
    {
      abi: farmingCenterABI,
      address: farmingCenterAddress,
      functionName: 'connectVirtualPool',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"decreaseLiquidity"`.
 */
export function useFarmingCenterDecreaseLiquidity<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof farmingCenterABI,
          'decreaseLiquidity'
        >['request']['abi'],
        'decreaseLiquidity',
        TMode
      > & { functionName?: 'decreaseLiquidity' }
    : UseContractWriteConfig<
        typeof farmingCenterABI,
        'decreaseLiquidity',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseLiquidity'
      } = {} as any,
) {
  return useContractWrite<typeof farmingCenterABI, 'decreaseLiquidity', TMode>({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'decreaseLiquidity',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"enterFarming"`.
 */
export function useFarmingCenterEnterFarming<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof farmingCenterABI,
          'enterFarming'
        >['request']['abi'],
        'enterFarming',
        TMode
      > & { functionName?: 'enterFarming' }
    : UseContractWriteConfig<typeof farmingCenterABI, 'enterFarming', TMode> & {
        abi?: never
        functionName?: 'enterFarming'
      } = {} as any,
) {
  return useContractWrite<typeof farmingCenterABI, 'enterFarming', TMode>({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'enterFarming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"exitFarming"`.
 */
export function useFarmingCenterExitFarming<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof farmingCenterABI,
          'exitFarming'
        >['request']['abi'],
        'exitFarming',
        TMode
      > & { functionName?: 'exitFarming' }
    : UseContractWriteConfig<typeof farmingCenterABI, 'exitFarming', TMode> & {
        abi?: never
        functionName?: 'exitFarming'
      } = {} as any,
) {
  return useContractWrite<typeof farmingCenterABI, 'exitFarming', TMode>({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'exitFarming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"increaseLiquidity"`.
 */
export function useFarmingCenterIncreaseLiquidity<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof farmingCenterABI,
          'increaseLiquidity'
        >['request']['abi'],
        'increaseLiquidity',
        TMode
      > & { functionName?: 'increaseLiquidity' }
    : UseContractWriteConfig<
        typeof farmingCenterABI,
        'increaseLiquidity',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseLiquidity'
      } = {} as any,
) {
  return useContractWrite<typeof farmingCenterABI, 'increaseLiquidity', TMode>({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'increaseLiquidity',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"multicall"`.
 */
export function useFarmingCenterMulticall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof farmingCenterABI,
          'multicall'
        >['request']['abi'],
        'multicall',
        TMode
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<typeof farmingCenterABI, 'multicall', TMode> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any,
) {
  return useContractWrite<typeof farmingCenterABI, 'multicall', TMode>({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link farmingCenterABI}__.
 */
export function usePrepareFarmingCenterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof farmingCenterABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof farmingCenterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"applyLiquidityDelta"`.
 */
export function usePrepareFarmingCenterApplyLiquidityDelta(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof farmingCenterABI,
      'applyLiquidityDelta'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'applyLiquidityDelta',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof farmingCenterABI,
    'applyLiquidityDelta'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"burnPosition"`.
 */
export function usePrepareFarmingCenterBurnPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof farmingCenterABI, 'burnPosition'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'burnPosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof farmingCenterABI, 'burnPosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"claimReward"`.
 */
export function usePrepareFarmingCenterClaimReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof farmingCenterABI, 'claimReward'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'claimReward',
    ...config,
  } as UsePrepareContractWriteConfig<typeof farmingCenterABI, 'claimReward'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"collectRewards"`.
 */
export function usePrepareFarmingCenterCollectRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof farmingCenterABI, 'collectRewards'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'collectRewards',
    ...config,
  } as UsePrepareContractWriteConfig<typeof farmingCenterABI, 'collectRewards'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"connectVirtualPool"`.
 */
export function usePrepareFarmingCenterConnectVirtualPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof farmingCenterABI,
      'connectVirtualPool'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'connectVirtualPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof farmingCenterABI,
    'connectVirtualPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"decreaseLiquidity"`.
 */
export function usePrepareFarmingCenterDecreaseLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof farmingCenterABI, 'decreaseLiquidity'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'decreaseLiquidity',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof farmingCenterABI,
    'decreaseLiquidity'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"enterFarming"`.
 */
export function usePrepareFarmingCenterEnterFarming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof farmingCenterABI, 'enterFarming'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'enterFarming',
    ...config,
  } as UsePrepareContractWriteConfig<typeof farmingCenterABI, 'enterFarming'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"exitFarming"`.
 */
export function usePrepareFarmingCenterExitFarming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof farmingCenterABI, 'exitFarming'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'exitFarming',
    ...config,
  } as UsePrepareContractWriteConfig<typeof farmingCenterABI, 'exitFarming'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"increaseLiquidity"`.
 */
export function usePrepareFarmingCenterIncreaseLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof farmingCenterABI, 'increaseLiquidity'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'increaseLiquidity',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof farmingCenterABI,
    'increaseLiquidity'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link farmingCenterABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareFarmingCenterMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof farmingCenterABI, 'multicall'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: farmingCenterABI,
    address: farmingCenterAddress,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof farmingCenterABI, 'multicall'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eternalFarmingABI}__.
 */
export function useEternalFarmingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof eternalFarmingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eternalFarmingABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    ...config,
  } as UseContractReadConfig<
    typeof eternalFarmingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"FARMINGS_ADMINISTRATOR_ROLE"`.
 */
export function useEternalFarmingFarmingsAdministratorRole<
  TFunctionName extends 'FARMINGS_ADMINISTRATOR_ROLE',
  TSelectData = ReadContractResult<typeof eternalFarmingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eternalFarmingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'FARMINGS_ADMINISTRATOR_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof eternalFarmingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"INCENTIVE_MAKER_ROLE"`.
 */
export function useEternalFarmingIncentiveMakerRole<
  TFunctionName extends 'INCENTIVE_MAKER_ROLE',
  TSelectData = ReadContractResult<typeof eternalFarmingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eternalFarmingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'INCENTIVE_MAKER_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof eternalFarmingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"farmingCenter"`.
 */
export function useEternalFarmingFarmingCenter<
  TFunctionName extends 'farmingCenter',
  TSelectData = ReadContractResult<typeof eternalFarmingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eternalFarmingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'farmingCenter',
    ...config,
  } as UseContractReadConfig<
    typeof eternalFarmingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"farms"`.
 */
export function useEternalFarmingFarms<
  TFunctionName extends 'farms',
  TSelectData = ReadContractResult<typeof eternalFarmingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eternalFarmingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'farms',
    ...config,
  } as UseContractReadConfig<
    typeof eternalFarmingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"getRewardInfo"`.
 */
export function useEternalFarmingGetRewardInfo<
  TFunctionName extends 'getRewardInfo',
  TSelectData = ReadContractResult<typeof eternalFarmingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eternalFarmingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'getRewardInfo',
    ...config,
  } as UseContractReadConfig<
    typeof eternalFarmingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"incentives"`.
 */
export function useEternalFarmingIncentives<
  TFunctionName extends 'incentives',
  TSelectData = ReadContractResult<typeof eternalFarmingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eternalFarmingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'incentives',
    ...config,
  } as UseContractReadConfig<
    typeof eternalFarmingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"isEmergencyWithdrawActivated"`.
 */
export function useEternalFarmingIsEmergencyWithdrawActivated<
  TFunctionName extends 'isEmergencyWithdrawActivated',
  TSelectData = ReadContractResult<typeof eternalFarmingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eternalFarmingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'isEmergencyWithdrawActivated',
    ...config,
  } as UseContractReadConfig<
    typeof eternalFarmingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"isIncentiveDeactivated"`.
 */
export function useEternalFarmingIsIncentiveDeactivated<
  TFunctionName extends 'isIncentiveDeactivated',
  TSelectData = ReadContractResult<typeof eternalFarmingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eternalFarmingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'isIncentiveDeactivated',
    ...config,
  } as UseContractReadConfig<
    typeof eternalFarmingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"nonfungiblePositionManager"`.
 */
export function useEternalFarmingNonfungiblePositionManager<
  TFunctionName extends 'nonfungiblePositionManager',
  TSelectData = ReadContractResult<typeof eternalFarmingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eternalFarmingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'nonfungiblePositionManager',
    ...config,
  } as UseContractReadConfig<
    typeof eternalFarmingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"numOfIncentives"`.
 */
export function useEternalFarmingNumOfIncentives<
  TFunctionName extends 'numOfIncentives',
  TSelectData = ReadContractResult<typeof eternalFarmingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eternalFarmingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'numOfIncentives',
    ...config,
  } as UseContractReadConfig<
    typeof eternalFarmingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"rewards"`.
 */
export function useEternalFarmingRewards<
  TFunctionName extends 'rewards',
  TSelectData = ReadContractResult<typeof eternalFarmingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eternalFarmingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'rewards',
    ...config,
  } as UseContractReadConfig<
    typeof eternalFarmingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__.
 */
export function useEternalFarmingWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof eternalFarmingABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof eternalFarmingABI, TFunctionName, TMode>({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"addRewards"`.
 */
export function useEternalFarmingAddRewards<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          'addRewards'
        >['request']['abi'],
        'addRewards',
        TMode
      > & { functionName?: 'addRewards' }
    : UseContractWriteConfig<typeof eternalFarmingABI, 'addRewards', TMode> & {
        abi?: never
        functionName?: 'addRewards'
      } = {} as any,
) {
  return useContractWrite<typeof eternalFarmingABI, 'addRewards', TMode>({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'addRewards',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"claimReward"`.
 */
export function useEternalFarmingClaimReward<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          'claimReward'
        >['request']['abi'],
        'claimReward',
        TMode
      > & { functionName?: 'claimReward' }
    : UseContractWriteConfig<typeof eternalFarmingABI, 'claimReward', TMode> & {
        abi?: never
        functionName?: 'claimReward'
      } = {} as any,
) {
  return useContractWrite<typeof eternalFarmingABI, 'claimReward', TMode>({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'claimReward',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"claimRewardFrom"`.
 */
export function useEternalFarmingClaimRewardFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          'claimRewardFrom'
        >['request']['abi'],
        'claimRewardFrom',
        TMode
      > & { functionName?: 'claimRewardFrom' }
    : UseContractWriteConfig<
        typeof eternalFarmingABI,
        'claimRewardFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'claimRewardFrom'
      } = {} as any,
) {
  return useContractWrite<typeof eternalFarmingABI, 'claimRewardFrom', TMode>({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'claimRewardFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"collectRewards"`.
 */
export function useEternalFarmingCollectRewards<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          'collectRewards'
        >['request']['abi'],
        'collectRewards',
        TMode
      > & { functionName?: 'collectRewards' }
    : UseContractWriteConfig<
        typeof eternalFarmingABI,
        'collectRewards',
        TMode
      > & {
        abi?: never
        functionName?: 'collectRewards'
      } = {} as any,
) {
  return useContractWrite<typeof eternalFarmingABI, 'collectRewards', TMode>({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'collectRewards',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"createEternalFarming"`.
 */
export function useEternalFarmingCreateEternalFarming<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          'createEternalFarming'
        >['request']['abi'],
        'createEternalFarming',
        TMode
      > & { functionName?: 'createEternalFarming' }
    : UseContractWriteConfig<
        typeof eternalFarmingABI,
        'createEternalFarming',
        TMode
      > & {
        abi?: never
        functionName?: 'createEternalFarming'
      } = {} as any,
) {
  return useContractWrite<
    typeof eternalFarmingABI,
    'createEternalFarming',
    TMode
  >({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'createEternalFarming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"deactivateIncentive"`.
 */
export function useEternalFarmingDeactivateIncentive<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          'deactivateIncentive'
        >['request']['abi'],
        'deactivateIncentive',
        TMode
      > & { functionName?: 'deactivateIncentive' }
    : UseContractWriteConfig<
        typeof eternalFarmingABI,
        'deactivateIncentive',
        TMode
      > & {
        abi?: never
        functionName?: 'deactivateIncentive'
      } = {} as any,
) {
  return useContractWrite<
    typeof eternalFarmingABI,
    'deactivateIncentive',
    TMode
  >({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'deactivateIncentive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"decreaseRewardsAmount"`.
 */
export function useEternalFarmingDecreaseRewardsAmount<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          'decreaseRewardsAmount'
        >['request']['abi'],
        'decreaseRewardsAmount',
        TMode
      > & { functionName?: 'decreaseRewardsAmount' }
    : UseContractWriteConfig<
        typeof eternalFarmingABI,
        'decreaseRewardsAmount',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseRewardsAmount'
      } = {} as any,
) {
  return useContractWrite<
    typeof eternalFarmingABI,
    'decreaseRewardsAmount',
    TMode
  >({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'decreaseRewardsAmount',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"enterFarming"`.
 */
export function useEternalFarmingEnterFarming<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          'enterFarming'
        >['request']['abi'],
        'enterFarming',
        TMode
      > & { functionName?: 'enterFarming' }
    : UseContractWriteConfig<
        typeof eternalFarmingABI,
        'enterFarming',
        TMode
      > & {
        abi?: never
        functionName?: 'enterFarming'
      } = {} as any,
) {
  return useContractWrite<typeof eternalFarmingABI, 'enterFarming', TMode>({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'enterFarming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"exitFarming"`.
 */
export function useEternalFarmingExitFarming<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          'exitFarming'
        >['request']['abi'],
        'exitFarming',
        TMode
      > & { functionName?: 'exitFarming' }
    : UseContractWriteConfig<typeof eternalFarmingABI, 'exitFarming', TMode> & {
        abi?: never
        functionName?: 'exitFarming'
      } = {} as any,
) {
  return useContractWrite<typeof eternalFarmingABI, 'exitFarming', TMode>({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'exitFarming',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"setEmergencyWithdrawStatus"`.
 */
export function useEternalFarmingSetEmergencyWithdrawStatus<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          'setEmergencyWithdrawStatus'
        >['request']['abi'],
        'setEmergencyWithdrawStatus',
        TMode
      > & { functionName?: 'setEmergencyWithdrawStatus' }
    : UseContractWriteConfig<
        typeof eternalFarmingABI,
        'setEmergencyWithdrawStatus',
        TMode
      > & {
        abi?: never
        functionName?: 'setEmergencyWithdrawStatus'
      } = {} as any,
) {
  return useContractWrite<
    typeof eternalFarmingABI,
    'setEmergencyWithdrawStatus',
    TMode
  >({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'setEmergencyWithdrawStatus',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"setFarmingCenterAddress"`.
 */
export function useEternalFarmingSetFarmingCenterAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          'setFarmingCenterAddress'
        >['request']['abi'],
        'setFarmingCenterAddress',
        TMode
      > & { functionName?: 'setFarmingCenterAddress' }
    : UseContractWriteConfig<
        typeof eternalFarmingABI,
        'setFarmingCenterAddress',
        TMode
      > & {
        abi?: never
        functionName?: 'setFarmingCenterAddress'
      } = {} as any,
) {
  return useContractWrite<
    typeof eternalFarmingABI,
    'setFarmingCenterAddress',
    TMode
  >({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'setFarmingCenterAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"setRates"`.
 */
export function useEternalFarmingSetRates<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof eternalFarmingABI,
          'setRates'
        >['request']['abi'],
        'setRates',
        TMode
      > & { functionName?: 'setRates' }
    : UseContractWriteConfig<typeof eternalFarmingABI, 'setRates', TMode> & {
        abi?: never
        functionName?: 'setRates'
      } = {} as any,
) {
  return useContractWrite<typeof eternalFarmingABI, 'setRates', TMode>({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'setRates',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__.
 */
export function usePrepareEternalFarmingWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof eternalFarmingABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof eternalFarmingABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"addRewards"`.
 */
export function usePrepareEternalFarmingAddRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof eternalFarmingABI, 'addRewards'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'addRewards',
    ...config,
  } as UsePrepareContractWriteConfig<typeof eternalFarmingABI, 'addRewards'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"claimReward"`.
 */
export function usePrepareEternalFarmingClaimReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof eternalFarmingABI, 'claimReward'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'claimReward',
    ...config,
  } as UsePrepareContractWriteConfig<typeof eternalFarmingABI, 'claimReward'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"claimRewardFrom"`.
 */
export function usePrepareEternalFarmingClaimRewardFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof eternalFarmingABI, 'claimRewardFrom'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'claimRewardFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof eternalFarmingABI,
    'claimRewardFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"collectRewards"`.
 */
export function usePrepareEternalFarmingCollectRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof eternalFarmingABI, 'collectRewards'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'collectRewards',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof eternalFarmingABI,
    'collectRewards'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"createEternalFarming"`.
 */
export function usePrepareEternalFarmingCreateEternalFarming(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof eternalFarmingABI,
      'createEternalFarming'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'createEternalFarming',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof eternalFarmingABI,
    'createEternalFarming'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"deactivateIncentive"`.
 */
export function usePrepareEternalFarmingDeactivateIncentive(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof eternalFarmingABI,
      'deactivateIncentive'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'deactivateIncentive',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof eternalFarmingABI,
    'deactivateIncentive'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"decreaseRewardsAmount"`.
 */
export function usePrepareEternalFarmingDecreaseRewardsAmount(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof eternalFarmingABI,
      'decreaseRewardsAmount'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'decreaseRewardsAmount',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof eternalFarmingABI,
    'decreaseRewardsAmount'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"enterFarming"`.
 */
export function usePrepareEternalFarmingEnterFarming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof eternalFarmingABI, 'enterFarming'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'enterFarming',
    ...config,
  } as UsePrepareContractWriteConfig<typeof eternalFarmingABI, 'enterFarming'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"exitFarming"`.
 */
export function usePrepareEternalFarmingExitFarming(
  config: Omit<
    UsePrepareContractWriteConfig<typeof eternalFarmingABI, 'exitFarming'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'exitFarming',
    ...config,
  } as UsePrepareContractWriteConfig<typeof eternalFarmingABI, 'exitFarming'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"setEmergencyWithdrawStatus"`.
 */
export function usePrepareEternalFarmingSetEmergencyWithdrawStatus(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof eternalFarmingABI,
      'setEmergencyWithdrawStatus'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'setEmergencyWithdrawStatus',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof eternalFarmingABI,
    'setEmergencyWithdrawStatus'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"setFarmingCenterAddress"`.
 */
export function usePrepareEternalFarmingSetFarmingCenterAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof eternalFarmingABI,
      'setFarmingCenterAddress'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'setFarmingCenterAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof eternalFarmingABI,
    'setFarmingCenterAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eternalFarmingABI}__ and `functionName` set to `"setRates"`.
 */
export function usePrepareEternalFarmingSetRates(
  config: Omit<
    UsePrepareContractWriteConfig<typeof eternalFarmingABI, 'setRates'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eternalFarmingABI,
    address: eternalFarmingAddress,
    functionName: 'setRates',
    ...config,
  } as UsePrepareContractWriteConfig<typeof eternalFarmingABI, 'setRates'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__.
 */
export function useAlgebraFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAlgebraFactoryDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"baseFeeConfiguration"`.
 */
export function useAlgebraFactoryBaseFeeConfiguration<
  TFunctionName extends 'baseFeeConfiguration',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'baseFeeConfiguration',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"communityVault"`.
 */
export function useAlgebraFactoryCommunityVault<
  TFunctionName extends 'communityVault',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'communityVault',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"defaultCommunityFee"`.
 */
export function useAlgebraFactoryDefaultCommunityFee<
  TFunctionName extends 'defaultCommunityFee',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'defaultCommunityFee',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"farmingAddress"`.
 */
export function useAlgebraFactoryFarmingAddress<
  TFunctionName extends 'farmingAddress',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'farmingAddress',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAlgebraFactoryGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useAlgebraFactoryGetRoleMember<
  TFunctionName extends 'getRoleMember',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'getRoleMember',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useAlgebraFactoryGetRoleMemberCount<
  TFunctionName extends 'getRoleMemberCount',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'getRoleMemberCount',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAlgebraFactoryHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"hasRoleOrOwner"`.
 */
export function useAlgebraFactoryHasRoleOrOwner<
  TFunctionName extends 'hasRoleOrOwner',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'hasRoleOrOwner',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"owner"`.
 */
export function useAlgebraFactoryOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useAlgebraFactoryPendingOwner<
  TFunctionName extends 'pendingOwner',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'pendingOwner',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"poolByPair"`.
 */
export function useAlgebraFactoryPoolByPair<
  TFunctionName extends 'poolByPair',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'poolByPair',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"poolDeployer"`.
 */
export function useAlgebraFactoryPoolDeployer<
  TFunctionName extends 'poolDeployer',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'poolDeployer',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"renounceOwnershipStartTimestamp"`.
 */
export function useAlgebraFactoryRenounceOwnershipStartTimestamp<
  TFunctionName extends 'renounceOwnershipStartTimestamp',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'renounceOwnershipStartTimestamp',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAlgebraFactorySupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof algebraFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof algebraFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__.
 */
export function useAlgebraFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof algebraFactoryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof algebraFactoryABI, TFunctionName, TMode>({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useAlgebraFactoryAcceptOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          'acceptOwnership'
        >['request']['abi'],
        'acceptOwnership',
        TMode
      > & { functionName?: 'acceptOwnership' }
    : UseContractWriteConfig<
        typeof algebraFactoryABI,
        'acceptOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'acceptOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof algebraFactoryABI, 'acceptOwnership', TMode>({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'acceptOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"createPool"`.
 */
export function useAlgebraFactoryCreatePool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          'createPool'
        >['request']['abi'],
        'createPool',
        TMode
      > & { functionName?: 'createPool' }
    : UseContractWriteConfig<typeof algebraFactoryABI, 'createPool', TMode> & {
        abi?: never
        functionName?: 'createPool'
      } = {} as any,
) {
  return useContractWrite<typeof algebraFactoryABI, 'createPool', TMode>({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'createPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAlgebraFactoryGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof algebraFactoryABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<typeof algebraFactoryABI, 'grantRole', TMode>({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useAlgebraFactoryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof algebraFactoryABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof algebraFactoryABI, 'renounceOwnership', TMode>(
    {
      abi: algebraFactoryABI,
      address: algebraFactoryAddress,
      functionName: 'renounceOwnership',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAlgebraFactoryRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        typeof algebraFactoryABI,
        'renounceRole',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<typeof algebraFactoryABI, 'renounceRole', TMode>({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAlgebraFactoryRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof algebraFactoryABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<typeof algebraFactoryABI, 'revokeRole', TMode>({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"setBaseFeeConfiguration"`.
 */
export function useAlgebraFactorySetBaseFeeConfiguration<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          'setBaseFeeConfiguration'
        >['request']['abi'],
        'setBaseFeeConfiguration',
        TMode
      > & { functionName?: 'setBaseFeeConfiguration' }
    : UseContractWriteConfig<
        typeof algebraFactoryABI,
        'setBaseFeeConfiguration',
        TMode
      > & {
        abi?: never
        functionName?: 'setBaseFeeConfiguration'
      } = {} as any,
) {
  return useContractWrite<
    typeof algebraFactoryABI,
    'setBaseFeeConfiguration',
    TMode
  >({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'setBaseFeeConfiguration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"setDefaultCommunityFee"`.
 */
export function useAlgebraFactorySetDefaultCommunityFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          'setDefaultCommunityFee'
        >['request']['abi'],
        'setDefaultCommunityFee',
        TMode
      > & { functionName?: 'setDefaultCommunityFee' }
    : UseContractWriteConfig<
        typeof algebraFactoryABI,
        'setDefaultCommunityFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setDefaultCommunityFee'
      } = {} as any,
) {
  return useContractWrite<
    typeof algebraFactoryABI,
    'setDefaultCommunityFee',
    TMode
  >({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'setDefaultCommunityFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"setFarmingAddress"`.
 */
export function useAlgebraFactorySetFarmingAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          'setFarmingAddress'
        >['request']['abi'],
        'setFarmingAddress',
        TMode
      > & { functionName?: 'setFarmingAddress' }
    : UseContractWriteConfig<
        typeof algebraFactoryABI,
        'setFarmingAddress',
        TMode
      > & {
        abi?: never
        functionName?: 'setFarmingAddress'
      } = {} as any,
) {
  return useContractWrite<typeof algebraFactoryABI, 'setFarmingAddress', TMode>(
    {
      abi: algebraFactoryABI,
      address: algebraFactoryAddress,
      functionName: 'setFarmingAddress',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"startRenounceOwnership"`.
 */
export function useAlgebraFactoryStartRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          'startRenounceOwnership'
        >['request']['abi'],
        'startRenounceOwnership',
        TMode
      > & { functionName?: 'startRenounceOwnership' }
    : UseContractWriteConfig<
        typeof algebraFactoryABI,
        'startRenounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'startRenounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof algebraFactoryABI,
    'startRenounceOwnership',
    TMode
  >({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'startRenounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"stopRenounceOwnership"`.
 */
export function useAlgebraFactoryStopRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          'stopRenounceOwnership'
        >['request']['abi'],
        'stopRenounceOwnership',
        TMode
      > & { functionName?: 'stopRenounceOwnership' }
    : UseContractWriteConfig<
        typeof algebraFactoryABI,
        'stopRenounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'stopRenounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof algebraFactoryABI,
    'stopRenounceOwnership',
    TMode
  >({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'stopRenounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useAlgebraFactoryTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraFactoryABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof algebraFactoryABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof algebraFactoryABI, 'transferOwnership', TMode>(
    {
      abi: algebraFactoryABI,
      address: algebraFactoryAddress,
      functionName: 'transferOwnership',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__.
 */
export function usePrepareAlgebraFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraFactoryABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareAlgebraFactoryAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraFactoryABI, 'acceptOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'acceptOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraFactoryABI,
    'acceptOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"createPool"`.
 */
export function usePrepareAlgebraFactoryCreatePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraFactoryABI, 'createPool'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'createPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraFactoryABI, 'createPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAlgebraFactoryGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraFactoryABI, 'grantRole'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraFactoryABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareAlgebraFactoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraFactoryABI,
      'renounceOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraFactoryABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAlgebraFactoryRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraFactoryABI, 'renounceRole'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraFactoryABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAlgebraFactoryRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraFactoryABI, 'revokeRole'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraFactoryABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"setBaseFeeConfiguration"`.
 */
export function usePrepareAlgebraFactorySetBaseFeeConfiguration(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraFactoryABI,
      'setBaseFeeConfiguration'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'setBaseFeeConfiguration',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraFactoryABI,
    'setBaseFeeConfiguration'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"setDefaultCommunityFee"`.
 */
export function usePrepareAlgebraFactorySetDefaultCommunityFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraFactoryABI,
      'setDefaultCommunityFee'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'setDefaultCommunityFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraFactoryABI,
    'setDefaultCommunityFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"setFarmingAddress"`.
 */
export function usePrepareAlgebraFactorySetFarmingAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraFactoryABI,
      'setFarmingAddress'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'setFarmingAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraFactoryABI,
    'setFarmingAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"startRenounceOwnership"`.
 */
export function usePrepareAlgebraFactoryStartRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraFactoryABI,
      'startRenounceOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'startRenounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraFactoryABI,
    'startRenounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"stopRenounceOwnership"`.
 */
export function usePrepareAlgebraFactoryStopRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraFactoryABI,
      'stopRenounceOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'stopRenounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraFactoryABI,
    'stopRenounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareAlgebraFactoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraFactoryABI,
      'transferOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraFactoryABI,
    address: algebraFactoryAddress,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraFactoryABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__.
 */
export function useAlgebraPoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"communityFeeLastTimestamp"`.
 */
export function useAlgebraPoolCommunityFeeLastTimestamp<
  TFunctionName extends 'communityFeeLastTimestamp',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'communityFeeLastTimestamp',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"communityVault"`.
 */
export function useAlgebraPoolCommunityVault<
  TFunctionName extends 'communityVault',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'communityVault',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"factory"`.
 */
export function useAlgebraPoolFactory<
  TFunctionName extends 'factory',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"fee"`.
 */
export function useAlgebraPoolFee<
  TFunctionName extends 'fee',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'fee',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"getCommunityFeePending"`.
 */
export function useAlgebraPoolGetCommunityFeePending<
  TFunctionName extends 'getCommunityFeePending',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'getCommunityFeePending',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"getReserves"`.
 */
export function useAlgebraPoolGetReserves<
  TFunctionName extends 'getReserves',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'getReserves',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"globalState"`.
 */
export function useAlgebraPoolGlobalState<
  TFunctionName extends 'globalState',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'globalState',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"liquidity"`.
 */
export function useAlgebraPoolLiquidity<
  TFunctionName extends 'liquidity',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'liquidity',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"maxLiquidityPerTick"`.
 */
export function useAlgebraPoolMaxLiquidityPerTick<
  TFunctionName extends 'maxLiquidityPerTick',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'maxLiquidityPerTick',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"nextTickGlobal"`.
 */
export function useAlgebraPoolNextTickGlobal<
  TFunctionName extends 'nextTickGlobal',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'nextTickGlobal',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"plugin"`.
 */
export function useAlgebraPoolPlugin<
  TFunctionName extends 'plugin',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'plugin',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"positions"`.
 */
export function useAlgebraPoolPositions<
  TFunctionName extends 'positions',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'positions',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"prevTickGlobal"`.
 */
export function useAlgebraPoolPrevTickGlobal<
  TFunctionName extends 'prevTickGlobal',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'prevTickGlobal',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"tickSpacing"`.
 */
export function useAlgebraPoolTickSpacing<
  TFunctionName extends 'tickSpacing',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'tickSpacing',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"tickTable"`.
 */
export function useAlgebraPoolTickTable<
  TFunctionName extends 'tickTable',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'tickTable',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"ticks"`.
 */
export function useAlgebraPoolTicks<
  TFunctionName extends 'ticks',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'ticks',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"token0"`.
 */
export function useAlgebraPoolToken0<
  TFunctionName extends 'token0',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"token1"`.
 */
export function useAlgebraPoolToken1<
  TFunctionName extends 'token1',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"totalFeeGrowth0Token"`.
 */
export function useAlgebraPoolTotalFeeGrowth0Token<
  TFunctionName extends 'totalFeeGrowth0Token',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'totalFeeGrowth0Token',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"totalFeeGrowth1Token"`.
 */
export function useAlgebraPoolTotalFeeGrowth1Token<
  TFunctionName extends 'totalFeeGrowth1Token',
  TSelectData = ReadContractResult<typeof algebraPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraPoolABI,
    functionName: 'totalFeeGrowth1Token',
    ...config,
  } as UseContractReadConfig<typeof algebraPoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__.
 */
export function useAlgebraPoolWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof algebraPoolABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof algebraPoolABI, TFunctionName, TMode>({
    abi: algebraPoolABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"burn"`.
 */
export function useAlgebraPoolBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof algebraPoolABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof algebraPoolABI, 'burn', TMode>({
    abi: algebraPoolABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"collect"`.
 */
export function useAlgebraPoolCollect<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          'collect'
        >['request']['abi'],
        'collect',
        TMode
      > & { functionName?: 'collect' }
    : UseContractWriteConfig<typeof algebraPoolABI, 'collect', TMode> & {
        abi?: never
        functionName?: 'collect'
      } = {} as any,
) {
  return useContractWrite<typeof algebraPoolABI, 'collect', TMode>({
    abi: algebraPoolABI,
    functionName: 'collect',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"flash"`.
 */
export function useAlgebraPoolFlash<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          'flash'
        >['request']['abi'],
        'flash',
        TMode
      > & { functionName?: 'flash' }
    : UseContractWriteConfig<typeof algebraPoolABI, 'flash', TMode> & {
        abi?: never
        functionName?: 'flash'
      } = {} as any,
) {
  return useContractWrite<typeof algebraPoolABI, 'flash', TMode>({
    abi: algebraPoolABI,
    functionName: 'flash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"initialize"`.
 */
export function useAlgebraPoolInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof algebraPoolABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof algebraPoolABI, 'initialize', TMode>({
    abi: algebraPoolABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"mint"`.
 */
export function useAlgebraPoolMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof algebraPoolABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof algebraPoolABI, 'mint', TMode>({
    abi: algebraPoolABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"setCommunityFee"`.
 */
export function useAlgebraPoolSetCommunityFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          'setCommunityFee'
        >['request']['abi'],
        'setCommunityFee',
        TMode
      > & { functionName?: 'setCommunityFee' }
    : UseContractWriteConfig<
        typeof algebraPoolABI,
        'setCommunityFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setCommunityFee'
      } = {} as any,
) {
  return useContractWrite<typeof algebraPoolABI, 'setCommunityFee', TMode>({
    abi: algebraPoolABI,
    functionName: 'setCommunityFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"setFee"`.
 */
export function useAlgebraPoolSetFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          'setFee'
        >['request']['abi'],
        'setFee',
        TMode
      > & { functionName?: 'setFee' }
    : UseContractWriteConfig<typeof algebraPoolABI, 'setFee', TMode> & {
        abi?: never
        functionName?: 'setFee'
      } = {} as any,
) {
  return useContractWrite<typeof algebraPoolABI, 'setFee', TMode>({
    abi: algebraPoolABI,
    functionName: 'setFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"setPlugin"`.
 */
export function useAlgebraPoolSetPlugin<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          'setPlugin'
        >['request']['abi'],
        'setPlugin',
        TMode
      > & { functionName?: 'setPlugin' }
    : UseContractWriteConfig<typeof algebraPoolABI, 'setPlugin', TMode> & {
        abi?: never
        functionName?: 'setPlugin'
      } = {} as any,
) {
  return useContractWrite<typeof algebraPoolABI, 'setPlugin', TMode>({
    abi: algebraPoolABI,
    functionName: 'setPlugin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"setPluginConfig"`.
 */
export function useAlgebraPoolSetPluginConfig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          'setPluginConfig'
        >['request']['abi'],
        'setPluginConfig',
        TMode
      > & { functionName?: 'setPluginConfig' }
    : UseContractWriteConfig<
        typeof algebraPoolABI,
        'setPluginConfig',
        TMode
      > & {
        abi?: never
        functionName?: 'setPluginConfig'
      } = {} as any,
) {
  return useContractWrite<typeof algebraPoolABI, 'setPluginConfig', TMode>({
    abi: algebraPoolABI,
    functionName: 'setPluginConfig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"setTickSpacing"`.
 */
export function useAlgebraPoolSetTickSpacing<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          'setTickSpacing'
        >['request']['abi'],
        'setTickSpacing',
        TMode
      > & { functionName?: 'setTickSpacing' }
    : UseContractWriteConfig<typeof algebraPoolABI, 'setTickSpacing', TMode> & {
        abi?: never
        functionName?: 'setTickSpacing'
      } = {} as any,
) {
  return useContractWrite<typeof algebraPoolABI, 'setTickSpacing', TMode>({
    abi: algebraPoolABI,
    functionName: 'setTickSpacing',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"swap"`.
 */
export function useAlgebraPoolSwap<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          'swap'
        >['request']['abi'],
        'swap',
        TMode
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<typeof algebraPoolABI, 'swap', TMode> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<typeof algebraPoolABI, 'swap', TMode>({
    abi: algebraPoolABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"swapWithPaymentInAdvance"`.
 */
export function useAlgebraPoolSwapWithPaymentInAdvance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraPoolABI,
          'swapWithPaymentInAdvance'
        >['request']['abi'],
        'swapWithPaymentInAdvance',
        TMode
      > & { functionName?: 'swapWithPaymentInAdvance' }
    : UseContractWriteConfig<
        typeof algebraPoolABI,
        'swapWithPaymentInAdvance',
        TMode
      > & {
        abi?: never
        functionName?: 'swapWithPaymentInAdvance'
      } = {} as any,
) {
  return useContractWrite<
    typeof algebraPoolABI,
    'swapWithPaymentInAdvance',
    TMode
  >({
    abi: algebraPoolABI,
    functionName: 'swapWithPaymentInAdvance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__.
 */
export function usePrepareAlgebraPoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraPoolABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraPoolABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareAlgebraPoolBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraPoolABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraPoolABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"collect"`.
 */
export function usePrepareAlgebraPoolCollect(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraPoolABI, 'collect'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    functionName: 'collect',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraPoolABI, 'collect'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"flash"`.
 */
export function usePrepareAlgebraPoolFlash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraPoolABI, 'flash'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    functionName: 'flash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraPoolABI, 'flash'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareAlgebraPoolInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraPoolABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraPoolABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareAlgebraPoolMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraPoolABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraPoolABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"setCommunityFee"`.
 */
export function usePrepareAlgebraPoolSetCommunityFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraPoolABI, 'setCommunityFee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    functionName: 'setCommunityFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraPoolABI, 'setCommunityFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"setFee"`.
 */
export function usePrepareAlgebraPoolSetFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraPoolABI, 'setFee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    functionName: 'setFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraPoolABI, 'setFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"setPlugin"`.
 */
export function usePrepareAlgebraPoolSetPlugin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraPoolABI, 'setPlugin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    functionName: 'setPlugin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraPoolABI, 'setPlugin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"setPluginConfig"`.
 */
export function usePrepareAlgebraPoolSetPluginConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraPoolABI, 'setPluginConfig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    functionName: 'setPluginConfig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraPoolABI, 'setPluginConfig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"setTickSpacing"`.
 */
export function usePrepareAlgebraPoolSetTickSpacing(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraPoolABI, 'setTickSpacing'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    functionName: 'setTickSpacing',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraPoolABI, 'setTickSpacing'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareAlgebraPoolSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraPoolABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraPoolABI, 'swap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraPoolABI}__ and `functionName` set to `"swapWithPaymentInAdvance"`.
 */
export function usePrepareAlgebraPoolSwapWithPaymentInAdvance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraPoolABI,
      'swapWithPaymentInAdvance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraPoolABI,
    functionName: 'swapWithPaymentInAdvance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraPoolABI,
    'swapWithPaymentInAdvance'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__.
 */
export function useAlgebraVirtualPoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"FEE_WEIGHT_DENOMINATOR"`.
 */
export function useAlgebraVirtualPoolFeeWeightDenominator<
  TFunctionName extends 'FEE_WEIGHT_DENOMINATOR',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'FEE_WEIGHT_DENOMINATOR',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"RATE_CHANGE_FREQUENCY"`.
 */
export function useAlgebraVirtualPoolRateChangeFrequency<
  TFunctionName extends 'RATE_CHANGE_FREQUENCY',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'RATE_CHANGE_FREQUENCY',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"currentLiquidity"`.
 */
export function useAlgebraVirtualPoolCurrentLiquidity<
  TFunctionName extends 'currentLiquidity',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'currentLiquidity',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"deactivated"`.
 */
export function useAlgebraVirtualPoolDeactivated<
  TFunctionName extends 'deactivated',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'deactivated',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"dynamicRateActivated"`.
 */
export function useAlgebraVirtualPoolDynamicRateActivated<
  TFunctionName extends 'dynamicRateActivated',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'dynamicRateActivated',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"farmingAddress"`.
 */
export function useAlgebraVirtualPoolFarmingAddress<
  TFunctionName extends 'farmingAddress',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'farmingAddress',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"feeWeights"`.
 */
export function useAlgebraVirtualPoolFeeWeights<
  TFunctionName extends 'feeWeights',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'feeWeights',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"getInnerRewardsGrowth"`.
 */
export function useAlgebraVirtualPoolGetInnerRewardsGrowth<
  TFunctionName extends 'getInnerRewardsGrowth',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'getInnerRewardsGrowth',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"globalTick"`.
 */
export function useAlgebraVirtualPoolGlobalTick<
  TFunctionName extends 'globalTick',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'globalTick',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"plugin"`.
 */
export function useAlgebraVirtualPoolPlugin<
  TFunctionName extends 'plugin',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'plugin',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"prevTimestamp"`.
 */
export function useAlgebraVirtualPoolPrevTimestamp<
  TFunctionName extends 'prevTimestamp',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'prevTimestamp',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"rateLimits"`.
 */
export function useAlgebraVirtualPoolRateLimits<
  TFunctionName extends 'rateLimits',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'rateLimits',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"rewardRates"`.
 */
export function useAlgebraVirtualPoolRewardRates<
  TFunctionName extends 'rewardRates',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'rewardRates',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"rewardReserves"`.
 */
export function useAlgebraVirtualPoolRewardReserves<
  TFunctionName extends 'rewardReserves',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'rewardReserves',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"ticks"`.
 */
export function useAlgebraVirtualPoolTicks<
  TFunctionName extends 'ticks',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'ticks',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"totalRewardGrowth"`.
 */
export function useAlgebraVirtualPoolTotalRewardGrowth<
  TFunctionName extends 'totalRewardGrowth',
  TSelectData = ReadContractResult<typeof algebraVirtualPoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof algebraVirtualPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: algebraVirtualPoolABI,
    functionName: 'totalRewardGrowth',
    ...config,
  } as UseContractReadConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__.
 */
export function useAlgebraVirtualPoolWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraVirtualPoolABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof algebraVirtualPoolABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof algebraVirtualPoolABI, TFunctionName, TMode>({
    abi: algebraVirtualPoolABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"addRewards"`.
 */
export function useAlgebraVirtualPoolAddRewards<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraVirtualPoolABI,
          'addRewards'
        >['request']['abi'],
        'addRewards',
        TMode
      > & { functionName?: 'addRewards' }
    : UseContractWriteConfig<
        typeof algebraVirtualPoolABI,
        'addRewards',
        TMode
      > & {
        abi?: never
        functionName?: 'addRewards'
      } = {} as any,
) {
  return useContractWrite<typeof algebraVirtualPoolABI, 'addRewards', TMode>({
    abi: algebraVirtualPoolABI,
    functionName: 'addRewards',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"applyLiquidityDeltaToPosition"`.
 */
export function useAlgebraVirtualPoolApplyLiquidityDeltaToPosition<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraVirtualPoolABI,
          'applyLiquidityDeltaToPosition'
        >['request']['abi'],
        'applyLiquidityDeltaToPosition',
        TMode
      > & { functionName?: 'applyLiquidityDeltaToPosition' }
    : UseContractWriteConfig<
        typeof algebraVirtualPoolABI,
        'applyLiquidityDeltaToPosition',
        TMode
      > & {
        abi?: never
        functionName?: 'applyLiquidityDeltaToPosition'
      } = {} as any,
) {
  return useContractWrite<
    typeof algebraVirtualPoolABI,
    'applyLiquidityDeltaToPosition',
    TMode
  >({
    abi: algebraVirtualPoolABI,
    functionName: 'applyLiquidityDeltaToPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"crossTo"`.
 */
export function useAlgebraVirtualPoolCrossTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraVirtualPoolABI,
          'crossTo'
        >['request']['abi'],
        'crossTo',
        TMode
      > & { functionName?: 'crossTo' }
    : UseContractWriteConfig<typeof algebraVirtualPoolABI, 'crossTo', TMode> & {
        abi?: never
        functionName?: 'crossTo'
      } = {} as any,
) {
  return useContractWrite<typeof algebraVirtualPoolABI, 'crossTo', TMode>({
    abi: algebraVirtualPoolABI,
    functionName: 'crossTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"deactivate"`.
 */
export function useAlgebraVirtualPoolDeactivate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraVirtualPoolABI,
          'deactivate'
        >['request']['abi'],
        'deactivate',
        TMode
      > & { functionName?: 'deactivate' }
    : UseContractWriteConfig<
        typeof algebraVirtualPoolABI,
        'deactivate',
        TMode
      > & {
        abi?: never
        functionName?: 'deactivate'
      } = {} as any,
) {
  return useContractWrite<typeof algebraVirtualPoolABI, 'deactivate', TMode>({
    abi: algebraVirtualPoolABI,
    functionName: 'deactivate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"decreaseRewards"`.
 */
export function useAlgebraVirtualPoolDecreaseRewards<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraVirtualPoolABI,
          'decreaseRewards'
        >['request']['abi'],
        'decreaseRewards',
        TMode
      > & { functionName?: 'decreaseRewards' }
    : UseContractWriteConfig<
        typeof algebraVirtualPoolABI,
        'decreaseRewards',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseRewards'
      } = {} as any,
) {
  return useContractWrite<
    typeof algebraVirtualPoolABI,
    'decreaseRewards',
    TMode
  >({
    abi: algebraVirtualPoolABI,
    functionName: 'decreaseRewards',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"distributeRewards"`.
 */
export function useAlgebraVirtualPoolDistributeRewards<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraVirtualPoolABI,
          'distributeRewards'
        >['request']['abi'],
        'distributeRewards',
        TMode
      > & { functionName?: 'distributeRewards' }
    : UseContractWriteConfig<
        typeof algebraVirtualPoolABI,
        'distributeRewards',
        TMode
      > & {
        abi?: never
        functionName?: 'distributeRewards'
      } = {} as any,
) {
  return useContractWrite<
    typeof algebraVirtualPoolABI,
    'distributeRewards',
    TMode
  >({
    abi: algebraVirtualPoolABI,
    functionName: 'distributeRewards',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"setDynamicRateLimits"`.
 */
export function useAlgebraVirtualPoolSetDynamicRateLimits<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraVirtualPoolABI,
          'setDynamicRateLimits'
        >['request']['abi'],
        'setDynamicRateLimits',
        TMode
      > & { functionName?: 'setDynamicRateLimits' }
    : UseContractWriteConfig<
        typeof algebraVirtualPoolABI,
        'setDynamicRateLimits',
        TMode
      > & {
        abi?: never
        functionName?: 'setDynamicRateLimits'
      } = {} as any,
) {
  return useContractWrite<
    typeof algebraVirtualPoolABI,
    'setDynamicRateLimits',
    TMode
  >({
    abi: algebraVirtualPoolABI,
    functionName: 'setDynamicRateLimits',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"setRates"`.
 */
export function useAlgebraVirtualPoolSetRates<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraVirtualPoolABI,
          'setRates'
        >['request']['abi'],
        'setRates',
        TMode
      > & { functionName?: 'setRates' }
    : UseContractWriteConfig<
        typeof algebraVirtualPoolABI,
        'setRates',
        TMode
      > & {
        abi?: never
        functionName?: 'setRates'
      } = {} as any,
) {
  return useContractWrite<typeof algebraVirtualPoolABI, 'setRates', TMode>({
    abi: algebraVirtualPoolABI,
    functionName: 'setRates',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"setWeights"`.
 */
export function useAlgebraVirtualPoolSetWeights<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraVirtualPoolABI,
          'setWeights'
        >['request']['abi'],
        'setWeights',
        TMode
      > & { functionName?: 'setWeights' }
    : UseContractWriteConfig<
        typeof algebraVirtualPoolABI,
        'setWeights',
        TMode
      > & {
        abi?: never
        functionName?: 'setWeights'
      } = {} as any,
) {
  return useContractWrite<typeof algebraVirtualPoolABI, 'setWeights', TMode>({
    abi: algebraVirtualPoolABI,
    functionName: 'setWeights',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"switchDynamicRate"`.
 */
export function useAlgebraVirtualPoolSwitchDynamicRate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof algebraVirtualPoolABI,
          'switchDynamicRate'
        >['request']['abi'],
        'switchDynamicRate',
        TMode
      > & { functionName?: 'switchDynamicRate' }
    : UseContractWriteConfig<
        typeof algebraVirtualPoolABI,
        'switchDynamicRate',
        TMode
      > & {
        abi?: never
        functionName?: 'switchDynamicRate'
      } = {} as any,
) {
  return useContractWrite<
    typeof algebraVirtualPoolABI,
    'switchDynamicRate',
    TMode
  >({
    abi: algebraVirtualPoolABI,
    functionName: 'switchDynamicRate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__.
 */
export function usePrepareAlgebraVirtualPoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraVirtualPoolABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraVirtualPoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraVirtualPoolABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"addRewards"`.
 */
export function usePrepareAlgebraVirtualPoolAddRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraVirtualPoolABI, 'addRewards'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraVirtualPoolABI,
    functionName: 'addRewards',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraVirtualPoolABI,
    'addRewards'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"applyLiquidityDeltaToPosition"`.
 */
export function usePrepareAlgebraVirtualPoolApplyLiquidityDeltaToPosition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraVirtualPoolABI,
      'applyLiquidityDeltaToPosition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraVirtualPoolABI,
    functionName: 'applyLiquidityDeltaToPosition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraVirtualPoolABI,
    'applyLiquidityDeltaToPosition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"crossTo"`.
 */
export function usePrepareAlgebraVirtualPoolCrossTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraVirtualPoolABI, 'crossTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraVirtualPoolABI,
    functionName: 'crossTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraVirtualPoolABI, 'crossTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"deactivate"`.
 */
export function usePrepareAlgebraVirtualPoolDeactivate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraVirtualPoolABI, 'deactivate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraVirtualPoolABI,
    functionName: 'deactivate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraVirtualPoolABI,
    'deactivate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"decreaseRewards"`.
 */
export function usePrepareAlgebraVirtualPoolDecreaseRewards(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraVirtualPoolABI,
      'decreaseRewards'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraVirtualPoolABI,
    functionName: 'decreaseRewards',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraVirtualPoolABI,
    'decreaseRewards'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"distributeRewards"`.
 */
export function usePrepareAlgebraVirtualPoolDistributeRewards(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraVirtualPoolABI,
      'distributeRewards'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraVirtualPoolABI,
    functionName: 'distributeRewards',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraVirtualPoolABI,
    'distributeRewards'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"setDynamicRateLimits"`.
 */
export function usePrepareAlgebraVirtualPoolSetDynamicRateLimits(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraVirtualPoolABI,
      'setDynamicRateLimits'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraVirtualPoolABI,
    functionName: 'setDynamicRateLimits',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraVirtualPoolABI,
    'setDynamicRateLimits'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"setRates"`.
 */
export function usePrepareAlgebraVirtualPoolSetRates(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraVirtualPoolABI, 'setRates'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraVirtualPoolABI,
    functionName: 'setRates',
    ...config,
  } as UsePrepareContractWriteConfig<typeof algebraVirtualPoolABI, 'setRates'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"setWeights"`.
 */
export function usePrepareAlgebraVirtualPoolSetWeights(
  config: Omit<
    UsePrepareContractWriteConfig<typeof algebraVirtualPoolABI, 'setWeights'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraVirtualPoolABI,
    functionName: 'setWeights',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraVirtualPoolABI,
    'setWeights'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link algebraVirtualPoolABI}__ and `functionName` set to `"switchDynamicRate"`.
 */
export function usePrepareAlgebraVirtualPoolSwitchDynamicRate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof algebraVirtualPoolABI,
      'switchDynamicRate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: algebraVirtualPoolABI,
    functionName: 'switchDynamicRate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof algebraVirtualPoolABI,
    'switchDynamicRate'
  >)
}
